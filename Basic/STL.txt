VECTOR
vector<int>vec;
vector<int>vec(n,x); ------ vector will have n amount of x
vector<int>vec{10,20,30};

vec.push_back(a)  ---- pushing a at the end of vector
vec.pop_back() ------- removing last elemnt.
vec.size() ----------- returns the size of the vector

vector<int>::iterator it;
it ------------------------- a pointer to vector elements
it=vec.begin() --------- iterator pointing to vector’s first element
it=vec.end() ----------- iterator pointing to vector’s end

vector<int>::reverse_iterator it;
it=vec.rbegin() ------- iterator pointing to vector’s reversly first (last) element
it=vec.rend() --------- iterator pointing to vector’s reversly last (first) element

vec.front() ------------ returns vector’s first element
vec.back() ------------- returns vector’s last element
vec.clear() ------------ all elements are removed

vec.insert(it,x) ------ inserting x before iterator’s position
vec.erase(it) --------- removes the element where iterator is pointing
			
vec.erase(it1,it2) --- removes the elements between it1 and it2 (inclusive)
vec.empty() ---------- return true is vector is empty else returns false

it=find(vec.begin(),vec.end(),x)
if (it!=vec.end()) x found, else x not found

if(binary_search(vec.begin(),vec.end(),x)==true)  x found  else  not  found  
*the vector must be sorted*

sort(vec.begin(),vec.end()) ---------- sorts the vector
reverse(vec.begin(),vec.end()) ------- reverses the vector

Comparing By Second Element
bool comp(pair<int,int>a,pair<int,int>b)
{
    if(a.second!=b.second)
        return a.second<b.second;
    else
        return a.first>b.first;
}

LIST
list<int>lst
Same as vector but can't be accessed randomly.
Concrating list : lst.splice(lst.end(),lst2)

SET
set<int>st;
set<int>::iterator it;
***Elements of SET are DISTINCT***
it -------------------- a pointer to set’s elements
it=st.begin() --------- iterator pointing to set’s first element
it=st.end() ----------- iterator pointing to set’s end

st.erase(it) --------- removes the element where iterator is pointing
st.erase(it1,it2) --- removes the elements between it1 and it2 (inclusive)
st.empty() ---------- return true is set is empty else returns false

set<int>::reverse_iterator it;
it=st.rbegin() ------- iterator pointing to set’s reversly first (last) element
it=st.rend() --------- iterator pointing to set’s reversly last (first) element
if(st.find(x)==st.end()  x not found  else x found

UNORDERED SET
unordered_set<int>s
Same as set
Elements are not sorted

MULTISET
multiset<int>ms;
Same as set
Allows duplicate element

MAP
map<int,int>mp
map<int,int>::iterator it;
mp.insert(make_pair(a,b))
mp[a]=b
***KEYS of MAP are DISTINCT***

it=mp.begin() -------- iterator pointing to map’s first key
it=mp.end() ---------- iterator pointing to map’s last key
it->first ------------ key of the iterator
it->second ----------- value of the iterator

mp.clear() ----------- clear the map
mp.erase(it) --------- erase by iterator
mp.erase(num) -------- erase by key
mp.erase (it1,it2) –-- erase within range (inclusive)

UNORDERED MAP
unordered_map<int,int>mp
unordered_map<int,int>::iterator it
Same as Map 
Keys are not sorted
More faster unordered map:
mp.reserve(1024)
mp.max_load_factor(0.25)

STACK
stack<int>s
s.push(x) ---------- push x at the top of the stack
s.top() ------------ returns the top element of the stack
s.pop() ------------ removes the top element of the stack
s.empty() ---------- returns true if stack empty else returns false
s.size() ----------- returns stack’s size

QUEUE
queue<int>q
q.push(x) ------------ push x at the back of the queue
q.front() ------------ returns the first element of the queue
q.back() ------------- returns the last element of the queue
q.pop() -------------- removes the first element of the queue
q.empty() ------------ returns true if queue empty else returns false
q.size() ------------- returns queue’s size

PRIORITY QUEUE
priority_queue<int>pq ---------------------------- Max Heap (Max element on top)
priority_queue<int,vector<int>,greater<int> >pq -- Min Heap (Min element on top)
Same as queue
***Manual Comparator***
struct comp { 
    bool operator()(Node const& n1, Node const& n2) 
    { 
        return n1.x < n2.x; 
    } 
priority_queue<Node,vector<Node>,comp>pq; 

DEQUE
deque<int>dq
dq.push_front(x) ---------- push x at front of the deque
dq.push_back(x) ----------- push x at back of the deque
dq.at(x) -------------------returns the x'th element
dq.front() ---------------- returns the first element
dq.back() ----------------- returns the last element
dq.pop_front() ------------ removes the first element
dq.pop_back() ------------- removes the last element